<?php
/*
 * Copyright 2015 be.wan s.p.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
 
/*
 * @author Ahmed Zarioh (ahmed.zarioh@gmail.com)
 */
 
/*
 * DO NOT EDIT THIS FILE
 */
 
class Route
{
	/*
	 * this method verify if the Request method is "GET"
	 * then, invoke the method resolve 
	 */
	public static function get($path, $method,$routes,$request_type)
	{
		if(!isset($GLOBALS['return']))
		{
			if($request_type=="GET")
			{
				static::resolve($path, $method,$routes);
			}
		}
	}
	
	/*
	 * this method verify if the Request method is "POST"
	 * then, invoke the method resolve 
	 */
	public static function post($path, $method,$routes,$request_type)
	{
		if(!isset($GLOBALS['return']))
		{
			if($request_type=="POST")
			{
				static::resolve($path, $method,$routes);
			}
		}
	}
	
	/*
	 * this method verify if the Request method is "PUT"
	 * then, invoke the method resolve 
	 */
	public static function put($path, $method,$routes,$request_type)
	{		
		if(!isset($GLOBALS['return']))
		{
			if($request_type=="PUT")
			{
				static::resolve($path, $method,$routes);
			}
		}
	}
	
	/*
	 * this method verify if the Request method is "DELETE"
	 * then, invoke the method resolve 
	 */
	public static function delete($path, $method,$routes,$request_type)
	{
		if(!isset($GLOBALS['return']))
		{
			if($request_type=="DELETE")
			{
				static::resolve($path, $method,$routes);
			}
		}
	}
	
	/*
	 * perform the method resolve without verification
	 */
	public static function any($path, $method,$routes,$request_type = 0)
	{
		if(!isset($GLOBALS['return']))
		{
			static::resolve($path, $method,$routes);
		}		
	}
	
	/*
	 * This method verify if the request url match with the current routes
	 * then, call the route method founded
	 */
	public static function resolve($path, $method,$routes)
	{
		$params = explode('/', $path);
		$nb = count($params);
		/*if($nb>2)// && $params[2] == "allBy")
		{
			echo($_SERVER['REQUEST_URI']);
		}*/
		if($nb==count($routes))
		{
			$argArray = array();
			$cont = true;

			for($i=0;$i<$nb;$i++)
			{
				$text = preg_replace('#\{[^\}]*\}#', '(.+)', $params[$i]);

				if(preg_match('#'.$text.'#', $routes[$i]))
				{	
					$newDatas = array();
					preg_match('/'.$text.'/', $routes[$i],$newDatas);	
					$argArray = array_merge($argArray, array_slice($newDatas,1)); 
				}
				else 
				{
					$cont = false;						
				}
			}
			if($cont)
			{
				$GLOBALS['return'] = call_user_func_array($method, $argArray);
			}
		}
	}
}